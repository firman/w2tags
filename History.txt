= Change Log

Below is a complete listing of changes for each revision of W2TAGS.

== 0.8.6

=== Changes in htm.hot

swap / switch code between:
  >>js   >>_js
  >>css  >>_css

=== Changes in parser

==== update regex for merge_hot (!hot!)

Search folder are: running-ruby-script, source-w2tags, library-w2tags

==== update regex for merge_inc (!inc!)

Compatible running on Win32 or Linux, not yet test on Mac. when the source w2tags
code in win32 and open in Linux, there been conflict on line-end since in Linux
source code from win32 not translate properly (need manually remove the \r) 

== 0.8.5

=== Changes in htm.hot

params value always be trim/strip, no need to interpolation the "dollar",so you 
can code like this:
    
  -js jquery;jquery.listen
  
  <script type="text/javascript" src="jquery.js" > </script>
  <script type="text/javascript" src="jquery.listen.js" > </script>

  >>_css
  old: <link rel="stylesheet" href=" :strip$0.css" type="text/css" media="screen, projection" />
  new: <link rel="stylesheet" href="$0.css" type="text/css" media="screen, projection" />

  >>_js
  old: <script type="text/javascript" src=" :strip$0.js" > </script>
  new: <script type="text/javascript" src="$0.js" > </script>

=== Changes in erb.hot

   >>_each2
  old: $0.each_with_index do |r,i|
  new: $0.each_with_index do |$1|
  
  >>_eachs
  new: $0.sort.each do |$1|

  >>_a
  new: %a{href="#"}$$ $*

  >>_a2
  new: %a{href="<%= $1 %>"}$$ $0

=== Changes in parser

==== update regex for !inc!

now you can specify path for include source

  ex:
  !inc!../partial/paginate

  old: /!inc![ ]?([\w.]+)([`\n])/
  new: /!inc![ ]?([\/\w._]s+)([`\n])/

==== update inline doc

add and update inline doc, some of the documentation need correct documentation
and I need feedback to get proper inline documentation 

==== property "ext"

for testing, it will auto loading HOT files and default ext is "htm", and
now you can change the ext and auto loading will perform correctly.

==== lookup auto loading HOT changes (merge_tags)

now it will search in current folder if it not found it will search to gems
folder of w2tags/hot. 

==== w2tags command last params with char "<"

now it support end of tag not automatically close when last params with char "<"

  %div my div<
    %div other div
    
  <div>mydiv
    <div>other div</div>
  </div>
  
==== parse_set_var 

value will be trim down 

  &var= value
  @var= value2
  %div &var!
  %div @var!
  
  <div>value</div>
  <div>value2</div>

==== get_dollar / fix auto repeat line 

change behaviour "auto repeat" line 

  >>_li
  %li ~:capitalize$0

  %ul
    -li one;two
  
  <ul>
    <li>One</li>
    <li>Two</li>
  </ul>
  
==== Change Regex for get_dollar (default value)

  old: Regexp.new('~([^~]+)~\\'+x)
  new: Regexp.new('~:([^$]+)\\'+x)

=== Change Variable for name, id, class ( *: , *# , *. )

when you put command like: 

  %div:name#id.class myhtml
  
it will be save in these variable

  @mem_var['$:'] = ":name"  
  @mem_var['*:'] = "name"  
  @mem_var['$#'] = "#id"  
  @mem_var['*#'] = "id"  
  @mem_var['$.'] = ".class"  
  @mem_var['*.'] = "class"  

== 0.8.4

=== Sinatra Hook
last commit not include

=== Changes in parser
  
==== Now Parser can be test in IRB

  irb -rubygems -rw2tags
  >  p=W2Tags::Parser.new
  
  >  p.parse_line '%h1 title'
  => [<h1>title</h1>\n]
  
  >  p.parse_line '%h1#main{op="head"} title'
  => [<h1>title</h1>\n, <h1 id="main" op="head">title</h1>\n]
  
==== Add Default Value for ~def_value~*var*

inside hot you can make a default value for predefine var. Ex:

  >>_li
  %li{~name="widi"~*att*}
  
  %li line 1
  %li{name="arie"} line 2
  
  <li name="widi">line 1</li>
  <li name="arie">line 2</li>
  
predefine var effected are:
  
  *att*, *all*, *opt*, *id*, *name*, *class*, *code*

==== Change Regex for HOT

  1. old:    /(%)([!]?[ \t\$\w\-\/:#.%=]+)()~([^\n]*)\n/
     new:    /(%)([!]?[ \t\$\w\-\/:#.%=]+)~([^\n]*)\n/
  2. old:    /(%)([!]?[ \t\$\w\-\/:#.%=]+)\{([^\}]*)\}~([^!=])/
     new:    /(%)([!]?[ \t\$\w\-\/:#.%=]+\{[^\}]*\})~([^!=]*)\n/
     
==== Change Regex for get_dollar (default value)

  old: Regexp.new('~([\w]*)~\\'+x)
  new: Regexp.new('~([^~]+)~\\'+x)

==== Parser for :name#id.clas now include {attribut} and new var
parsing in w2tags and hot for {attribute} merge into method "idclass_var"
so it must change hot regex with the same params regex ($1,$2,$3)

variable *opt* is the same with $$

==== Syntax patern for Shortcut HOT is the same with w2tags command

ex: below an example shortcut HOT "-button" and how you write in source-code

  ### in HOT ###
  >>_button
  %button$${*att* ~label="$0"~}/

  ### command in source: ###
  -button{disabled="true"} Red
  -button{disabled="true" label="Red"} 
  %button{disabled="true" label="Red"}/
    
  -button:def#key.hlite{disabled="true" num="1"} Red
  
  ### result ###
  <button disabled="true" label="Red"/>
  <button disabled="true" label="Red"/>
  <button disabled="true" label="Red"/>
  <button name="def" id="key" class="hlite" disabled="true" num="1" label="Red"/>
  
== 0.8.3

=== Sinatra Hook

if your framework is Sinatra, now it have "hook" on it.
I'm forking blog "Scanty" create by "Adam Wiggins"
and this is how I do it in Scanty ("main.rb"):

  require 'rubygems'
  require 'sinatra'
  require 'w2tags'
  require 'w2tags/sinatra_hook' 

=== Changes in parser

==== all debug are off

before that debug stack is on, and it slowdown parsing inside rails / merb / sinatra 

==== W2TAGS inline now have option for not inline 

if the last char of params have a char "\"

  %p inline
    some_chars
  %p not inline\
    some_chars
  
will result in 

  <p>inline</p>
    some_chars
  <p>not inline
    some_chars
  </p>

==== Change Regex for Parameters 

  1. optional      
     old: Regexp.new('\|([^$|\n]*)\\'+x+'([^\|\n]*)\|') # ex: |..$1..|
     new: Regexp.new('~([^$|\n]*)\\' +x+'([^\|\n]*)~')  # ex: ~..$1..~
  2. default       
     old: Regexp.new('\|([\w]*)\|\\'+x) # ex: |..|$1
     new: Regexp.new('~([\w]*)~\\'  +x) # ex: ~..~$1

==== Fix autoclosing not working if it inside another W2TAGS

the enhance of "Function HOT". It will scan the last line of the result
if it find <% end %> it wwill check that now processing %w[else elsif]
end remove the <% end %>. Remember, it need define in HOT:

  >>_if
  >>_else
  >>_elsif
  >>_end
  
you can check into "erb.hot"

=== Changes in HOT

==== erb.hot

  old: >>_each   ### become ###
  new: >>_each2
  
  new: >>_each
       !/
       $0.each do |$1|
       -end 

==== htm.hot

  >>_utf-8, >>_feed

== 0.8.2

=== HOT for erb restructure

now erb have 5 sub hot you can include in.

=== Change Regex for W2TAGS

  1. old:        /(%)([!]?[ \t\w:]+\{[^\}]*\}[#.=]?[^!]*)!([^`\n]*)([`\n])/
     new: /^[ \t]*(%)([!]?[ \t\w:]+\{[^\}]*\}[#.=]?[^!]*)!([^\n]*)([\n])/
  2. old:        /(%)([!]?[ \t\w:]+[#.=]?[^!]*)!([^`\n]*)([`\n])/          
     new: /^[ \t]*(%)([!]?[ \t\w:]+[#.=]?[^!]*)!([^\n]*)([\n])/          
     
=== Change Regex for HOT

  1. old:    /(%)([!]?[ \t\$\w\-\/:#.%=]+)~([^\n]*)\n()/
     new:    /(%)([!]?[ \t\$\w\-\/:#.%=]+)()~([^\n]*)\n/
  2. old:    /(%)([!]?[ \t\$\w\-\/:#.%=]+)\{([^\}]*)\}([^!=])/
     new:    /(%)([!]?[ \t\$\w\-\/:#.%=]+)\{([^\}]*)\}~([^!=])/

=== Change Next-Tags(W2TAGS)

old => new: 

      'html'  = '%!head!'                   => "%head $*\n"
      'head'  = '%!body!'                   => "%body $*\n"
      'ol'    = '%!li!$0'                   => "%li $0\n"  
      'ul'    = '%!li!$0'                   => "%li $0\n"  
      'dl'    = '%!dt!$0'                   => "%dt $0\n"  
      'dt'    = '%!dd!$0'                   => "%dd $0\n"  
      'dd'    = '%!dt!$0'                   => "%dt $0\n"  
      'select'= '%!option{value="$0" $1}!'  => "%option $0\n"
      'form'  = '%!input$0!/'               => "%input$0!/\n"
      'table' = '%!th!$0'                   => "%th $0\n"
      'tr'    = ? '%!th!$0' : '%!td!$0'     => ? "%th $0\n" : "%td $0\n"
      
=== Change Variable for code

  old: %code%
  new: *code*
  
=== fix regex for different OS

=== debug for constanta now behave like debug for hot

=== auto-close when indent is less then

now if you put line text (not a W2TAGS command) and the identation is less then prev, 
it will auto-close the tags.

=== end tags change

  old: ./ (dot   represent how many end tags from buffer to be pull out)
  new: ~/ (tilde represent how many end tags from buffer to be pull out)
      
== 0.8.1

=== Add more example 

if you have any example and want to contribute to the world, Please email me to:
  widi harsojo, wharsojo@gmail.com

=== Debug constanta now print after write ouput

this behaviour is the same for Debuging HOT. 
  
Change format of debuging in -d:parser, for HOT will print "<< -H-O-T-"

=== Line empty will be gone 

but if you want to preserve the line, you must put in inside <i>-!</i> block 
so it will not be parse and if you want remove the indentation ex: 
need for <b>pre</b>-tags, you must put in inside <i>-!!</i> block 

=== Change Regex for HOT

  1. old: /(%)([!]?[ \t\$\w\-\/:#.%=]+)~([^\n]*)\n()/
     new: /(%)([!]?[ \t\$\w\-\/:#.%=]+)()~([^\n]*)\n/
  2. old: /(%)([!]?[ \t\$\w\-\/:#.%=]+)\{([^\}]*)\}([^!=])/
     new: /(%)([!]?[ \t\$\w\-\/:#.%=]+)\{([^\}]*)\}~([^!=])/

=== Change Regex for shortcut_exec

  old: /(^[\t ]*)-([\w\-\/:#.%=]*) ([^\n]+)\n/
  new: /(^[\t ]*)-([\w\-\/:#.%=]*) *([^\n]*)\n/
  
=== Change Regex for shortcut_equal

  old: /(^[\t ]*)=([\w\-\/:#.%=]*) ([^\n]+)\n/
  new: /(^[\t ]*)=([\w\-\/:#.%=]*) *([^\n]*)\n/

=== Change Regex for get_hot_simple

  1. old: /^[\t ]*(%)([\$\w:#.=]+\{[^\}]*\}[#.=]?[^! ]* )([^\n]*)\n/
     new: /^[\t ]*(%)([\$\w\-:#.=]+\{[^\}]*\}[#.=]?[^~! ]* )([^\n]*)\n/
  2. old: /^[\t ]*(%)([\$\w:#.=]+\{[^\}]*\}[#.=]?[^! ]*)()\n/
     new: /^[\t ]*(%)([\$\w\-:#.=]+\{[^\}]*\}[#.=]?[^~! ]*)()\n/
  
=== Change Variable for name, id, class

when you put command like: 

  %div:name#id.class myhtml
  
this command will parse and put-it in those variable below, 
and this variable is use on HOT

  old: %all% - %opt% - %id% - %name% - %class%
  new: *all* - *opt* - *id* - *name* - *class*

=== Change Regex for Parameters 

  1. optional      
     old: Regexp.new('\[([^\$]*)\\'+x+'([^\]]*)\]')     # ex: [..$1..]
     new: Regexp.new('\|([^$|\n]*)\\'+x+'([^\|\n]*)\|') # ex: |..$1..| 
  2. default       
     old: Regexp.new('\[([^\$]*)\\'+x)  # ex: [..$1
     new: Regexp.new('\|([\w]*)\|\\'+x) # ex: |..|$1
  3. interpolation 
     old: Regexp.new(':([\w]+)\\'+x)
     new: Regexp.new(':([^$]+)\\'+x) #exe methh: :upcase:$1 
     
  x is for Parameters ex: $0, $1..$9
  .. meaning you can put char on it.

=== Change Assign Variable

Change in Assign Variable inside source code, but using it in HOT is the same

  1. assign on normal variable 
      old ex: &myvar!value
      new ex: &myvar=value
      /^[ \t]*(&[\w]+)=([^\n]+)([\n])/

  2. assign on unique variable
      old ex: @myvar!value1;value2
      new ex: @myvar=value1;value2
      /^[ \t]*(@[\w]+)=([^\n]+)([\n])/

== 0.8.0

* Initial public release.
